{"version":3,"sources":["hooks/TxHook.ts","GlobalStyle.ts","components/EthBalance.tsx","utils/Erc20Constants.ts","components/WethBalance.tsx","components/Wrapper.tsx","App.tsx","index.tsx"],"names":["TxStatus","GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","EthBalance","useState","balance","setBalance","useSafeAppsSDK","sdk","safe","a","eth","getBalance","safeAddress","balanceEth","ethers","utils","formatEther","useEffect","fetchBalance","console","log","Typography","variant","component","WETH_ADDRESS","Erc20","WethBalance","provider","useMemo","SafeAppsSdkProvider","weth","Contract","balanceOf","balanceWeth","Wrapper","props","amountToWrap","setAmountToWrap","errorMessage","setErrorMessage","availableEth","setAvailableEth","isError","setIsError","wrappingState","setWrappingState","submittedSafeTxHash","setSumittedSafeTxHash","wrapEth","useCallback","parsedAmount","parseEther","txs","send","to","value","toString","data","safeTx","safeTxHash","Executing","error","Number","parseFloat","fetchAvailableEth","validateAmout","newValue","isNaN","Snackbar","open","autoHideDuration","message","TextField","label","helperText","onChange","e","target","CardActions","Button","size","color","onClick","wrap","useStyles","styled","form","makeStyles","root","maxWidth","maxHeight","App","classes","setWrap","Card","className","CardContent","ReactDOM","render","StrictMode","theme","loader","document","getElementById"],"mappings":"uKAGYA,E,6FC8BGC,EA7BKC,4BAAH,2fAwBHC,IACAC,K,yDCPCC,EAjBc,WAAO,IAAD,EACDC,mBAAS,iBADR,mBACxBC,EADwB,KACfC,EADe,OAETC,2BAAdC,EAFuB,EAEvBA,IAAKC,EAFkB,EAElBA,KAFkB,4CAI/B,4BAAAC,EAAA,sEAC6BF,EAAIG,IAAIC,WAAW,CAACH,EAAKI,cADtD,OACUC,EADV,OAEIR,EAAWS,IAAOC,MAAMC,YAAYH,IAFxC,4CAJ+B,sBAc/B,OALAI,qBAAU,YATqB,mCAU3BC,GACAC,QAAQC,IAAI,0BACb,IAEI,eAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,IAAtC,0BAAyDnB,M,SCnBvDoB,EAAe,6CACfC,EAAQ,CACjB,mFACA,+FACA,2EACA,oFCuBWC,EApBe,WAAO,IAAD,EACFvB,mBAAS,IADP,mBACzBC,EADyB,KAChBC,EADgB,OAGVC,2BAAdC,EAHwB,EAGxBA,IAAKC,EAHmB,EAGnBA,KACPmB,EAAWC,mBAAQ,kBAAM,IAAIC,sBAAoBrB,EAAMD,KAAM,CAACC,EAAMD,IACpEuB,EAAOF,mBAAQ,kBAAM,IAAId,IAAOiB,SAASP,EAAcC,EAAOE,KAAW,CAACA,IALhD,4CAOhC,4BAAAlB,EAAA,sEAC8BqB,EAAKE,UAAUxB,EAAKI,aADlD,OACUqB,EADV,OAEI5B,EAAWS,IAAOC,MAAMC,YAAYiB,IAFxC,4CAPgC,sBAiBhC,OALAhB,qBAAU,YAZsB,mCAa5BC,GACAC,QAAQC,IAAI,2BACb,IAEI,eAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,IAAtC,2BAA0DnB,M,8CJtBzDP,O,yBAAAA,I,gBAAAA,M,KKQZ,I,EAkFeqC,EAlFyB,SAACC,GAAyB,IAAD,EACvC7B,2BAAdC,EADqD,EACrDA,IAAKC,EADgD,EAChDA,KADgD,EAErBL,mBAAS,IAFY,mBAEtDiC,EAFsD,KAExCC,EAFwC,OAGrBlC,mBAAS,IAHY,mBAGtDmC,EAHsD,KAGxCC,EAHwC,OAIrBpC,mBAAS,GAJY,mBAItDqC,EAJsD,KAIxCC,EAJwC,OAK/BtC,oBAAS,GALsB,mBAKtDuC,EALsD,KAK7CC,EAL6C,OAMnBxC,mBAA0B,MANP,mBAMtDyC,EANsD,KAMvCC,EANuC,OAOR1C,mBAAwB,MAPhB,mBAOtD2C,EAPsD,KAOjCC,EAPiC,KASvDC,EAAUC,sBAAW,sBAAC,8BAAAxC,EAAA,0DACpBiC,EADoB,iEAKdQ,EAAepC,IAAOC,MAAMoC,WAAWf,GALzB,SAMC7B,EAAI6C,IAAIC,KAAK,CAC9BD,IAAK,CAAC,CACFE,GAAI9B,EACJ+B,MAAOL,EAAaM,WACpBC,KAAM,SAVM,OAMdC,EANc,OAcpBX,EAAsBW,EAAOC,YAC7Bd,EAAiBhD,EAAS+D,WAfN,kDAkBpBzC,QAAQ0C,MAAR,MAlBoB,0DAoBzB,CAACtD,EAAK6B,EAAcM,IA7BsC,4CAmC7D,mBAAAjC,EAAA,SAAAA,EAAA,sEAC6BF,EAAIG,IAAIC,WAAW,CAACH,EAAKI,cADtD,OACUC,EADV,OAEUJ,EAAIK,IAAOC,MAAMC,YAAYH,GACnC4B,EAAgBqB,OAAOC,WAAWtD,IAHtC,4CAnC6D,sBA+B7DQ,qBAAU,YA/BmD,mCAgCzD+C,KACD,CAACxD,EAAMD,IAQV,IAAM0D,EAAgBhB,uBAAY,SAACiB,GAC/B/C,QAAQC,IAAI8C,GACRC,MAAML,OAAOI,KACbvB,GAAW,GACXJ,EAAgB,iBAEXuB,OAAOC,WAAWG,GAAY1B,GACnCG,GAAW,GACXJ,EAAgB,sBAGhBI,GAAW,GACXJ,EAAgB,IAChBF,EAAgB6B,MAErB,CAAC1B,IAEJ,OACI,gCACI,cAAC4B,EAAA,EAAD,CACIC,KAAMzB,GAAiB/C,EAAS+D,UAChCU,iBAAkB,IAClBC,QAAS,yBAA2BzB,IACxC,cAAC0B,EAAA,EAAD,CACIjB,MAAOnB,EACPqC,MAAM,aACNZ,MAAOnB,EACPgC,WAAYpC,EACZqC,SAAU,SAAAC,GAAC,OAAIX,EAAcW,EAAEC,OAAOtB,UAE1C,cAACuB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAMlC,KAHnB,SAIKb,EAAMgD,KAAO,OAAS,iB,2BCpErCC,GAXYC,UAAOC,KAAV,6LAWGC,YAAW,CAC3BC,KAAM,CACJC,SAAU,QACVC,UAAW,YAwBAC,EAnBO,WACpB,IAAMC,EAAUR,IADU,EAEFjF,oBAAS,GAFP,mBAEnBgF,EAFmB,KAEbU,EAFa,KAI1B,OACE,eAACC,EAAA,EAAD,CAAMC,UAAWH,EAAQJ,KAAMN,QAAS,kBAAMW,GAASV,IAAvD,UACE,eAACa,EAAA,EAAD,WACE,cAAC,QAAD,CAAOhB,KAAK,KAAZ,SAAkBG,EAAO,OAAS,WACjCA,EACC,cAAC,EAAD,IACE,cAAC,EAAD,OAEN,cAACL,EAAA,EAAD,UACE,cAAC,EAAD,CAASK,KAAMA,UC/BvBc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,gBAAD,CAAeC,MAAOA,QAAtB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,CACEC,OACE,qCACE,cAAC,QAAD,CAAOrB,KAAK,KAAZ,iCACA,cAAC,SAAD,CAAQA,KAAK,UAJnB,SAQE,cAAC,EAAD,WAINsB,SAASC,eAAe,W","file":"static/js/main.92a36404.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport SafeAppsSDK from '@gnosis.pm/safe-apps-sdk';\n\nexport enum TxStatus {\n    Executing,\n    Done\n}\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport function TxHook(sdk: SafeAppsSDK, safeTxHash: string) {\n    const [isExecuting, setIsExecuting] = useState<TxStatus | null>(null)\n\n    useEffect(() => {\n        pollSafeTxHash()\n    })\n\n    async function pollSafeTxHash() {\n        while (true) {\n            const safeTx = await sdk.txs.getBySafeTxHash(safeTxHash);\n            console.log({ safeTx });\n            if (safeTx.isExecuted) {\n                setIsExecuting(TxStatus.Done);\n                return;\n            } else {\n                setIsExecuting(TxStatus.Executing);\n                await delay(5000);\n            }\n        }\n    }\n\n    return isExecuting;\n}\n","import { createGlobalStyle } from 'styled-components';\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2';\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2';\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%\n    }\n\n    body {\n       height: 100%;\n       margin: 0px;\n       padding: 0px;\n    }\n\n    #root {\n        height: 100%;\n        padding-right: 0.5rem;\n    }\n\n    .MuiFormControl-root,\n    .MuiInputBase-root {\n        width: 100% !important;\n    }\n\n    @font-face {\n        font-family: 'Averta';\n        src: local('Averta'), local('Averta Bold'),\n        url(${avertaFont}) format('woff2'),\n        url(${avertaBoldFont}) format('woff');\n    }\n`;\n\nexport default GlobalStyle;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { Typography } from '@material-ui/core';\n\nconst EthBalance: React.FC = () => {\n    const [balance, setBalance] = useState(\"loading state\");\n    const { sdk, safe } = useSafeAppsSDK();\n\n    async function fetchBalance() {\n        const balanceEth = await sdk.eth.getBalance([safe.safeAddress]);\n        setBalance(ethers.utils.formatEther(balanceEth));\n    }\n\n    useEffect(() => {\n        fetchBalance();\n        console.log(\"Updating ETH balance\");\n    }, []);\n\n    return <Typography variant=\"body2\" component=\"p\" >ETH balance: {balance}</Typography>\n}\n\nexport default EthBalance;\n\n","export const WETH_ADDRESS = \"0xc778417E063141139Fce010982780140Aa0cD5Ab\";\nexport const Erc20 = [\n    \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n    \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n    \"function balanceOf(address _owner) public view returns (uint256 balance)\",\n    \"event Approval(address indexed _owner, address indexed _spender, uint256 _value)\"\n];\n","import React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport { Title } from '@gnosis.pm/safe-react-components';\nimport { SafeAppsSdkProvider } from '@gnosis.pm/safe-apps-ethers-provider';\nimport { ethers } from 'ethers';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { WETH_ADDRESS, Erc20 } from '../utils/Erc20Constants'\nimport { Typography } from '@material-ui/core';\n\nconst WethBalance: React.FC = () => {\n    const [balance, setBalance] = useState(\"\");\n\n    const { sdk, safe } = useSafeAppsSDK();\n    const provider = useMemo(() => new SafeAppsSdkProvider(safe, sdk), [safe, sdk]);\n    const weth = useMemo(() => new ethers.Contract(WETH_ADDRESS, Erc20, provider), [provider]);\n\n    async function fetchBalance() {\n        const balanceWeth = await weth.balanceOf(safe.safeAddress);\n        setBalance(ethers.utils.formatEther(balanceWeth));\n    }\n\n    useEffect(() => {\n        fetchBalance();\n        console.log(\"Updating WETH balance\");\n    }, []);\n\n    return <Typography variant=\"body2\" component=\"p\" >WETH Balance: {balance}</Typography>\n}\n\nexport default WethBalance;\n\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { Button, CardActions, Snackbar, TextField } from '@material-ui/core';\nimport { WETH_ADDRESS } from '../utils/Erc20Constants';\nimport { ethers } from 'ethers';\nimport { TxHook, TxStatus } from '../hooks/TxHook';\n\ninterface WrapperProps {\n    wrap: boolean\n}\n\nconst Wrapper: React.FC<WrapperProps> = (props: WrapperProps) => {\n    const { sdk, safe } = useSafeAppsSDK();\n    const [amountToWrap, setAmountToWrap] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [availableEth, setAvailableEth] = useState(0.0);\n    const [isError, setIsError] = useState(false);\n    const [wrappingState, setWrappingState] = useState<TxStatus | null>(null);\n    const [submittedSafeTxHash, setSumittedSafeTxHash] = useState<string | null>(null);\n\n    const wrapEth = useCallback(async () => {\n        if (isError) {\n            return;\n        }\n        try {\n            const parsedAmount = ethers.utils.parseEther(amountToWrap)\n            const safeTx = await sdk.txs.send({\n                txs: [{\n                    to: WETH_ADDRESS,\n                    value: parsedAmount.toString(),\n                    data: '0x'\n                }]\n            })\n            // setWrappingState(TxHook(sdk, safeTx.safeTxHash));\n            setSumittedSafeTxHash(safeTx.safeTxHash);\n            setWrappingState(TxStatus.Executing);\n\n        } catch (e) {\n            console.error(e)\n        }\n    }, [sdk, amountToWrap, isError])\n\n    useEffect(() => {\n        fetchAvailableEth();\n    }, [safe, sdk]);\n\n    async function fetchAvailableEth() {\n        const balanceEth = await sdk.eth.getBalance([safe.safeAddress]);\n        const a = ethers.utils.formatEther(balanceEth);\n        setAvailableEth(Number.parseFloat(a));\n    };\n\n    const validateAmout = useCallback((newValue: string) => {\n        console.log(newValue);\n        if (isNaN(Number(newValue))) {\n            setIsError(true);\n            setErrorMessage(\"Not a number\");\n        }\n        else if (Number.parseFloat(newValue) > availableEth) {\n            setIsError(true);\n            setErrorMessage(\"Not enough Ether\");\n        }\n        else {\n            setIsError(false);\n            setErrorMessage(\"\");\n            setAmountToWrap(newValue);\n        }\n    }, [availableEth])\n\n    return (\n        <div>\n            <Snackbar\n                open={wrappingState == TxStatus.Executing}\n                autoHideDuration={6000}\n                message={\"Submitted SafeTxHash: \" + submittedSafeTxHash} />\n            <TextField\n                value={amountToWrap}\n                label=\"ETH amount\"\n                error={isError}\n                helperText={errorMessage}\n                onChange={e => validateAmout(e.target.value)} />\n\n            <CardActions>\n                <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    onClick={() => wrapEth()}>\n                    {props.wrap ? \"Wrap\" : \"Unwrap\"}\n                </Button>\n            </CardActions>\n        </div>);\n}\n\nexport default Wrapper;\n","import styled from 'styled-components';\nimport EthBalance from './components/EthBalance';\nimport WethBalance from './components/WethBalance';\nimport Wrapper from './components/Wrapper';\nimport { CardContent, Card, makeStyles, CardActions } from '@material-ui/core';\nimport { Title } from '@gnosis.pm/safe-react-components';\nimport React, { useState } from 'react';\n\nconst Container = styled.form`\n  margin-bottom: 2rem;\n  width: 100%;\n  max-width: 480px;\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: \"300px\",\n    maxHeight: \"300px\"\n  },\n});\n\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const [wrap, setWrap] = useState(true);\n\n  return (\n    <Card className={classes.root} onClick={() => setWrap(!wrap)} >\n      <CardContent>\n        <Title size=\"lg\">{wrap ? \"WRAP\" : \"UNWRAP\"}</Title>\n        {wrap ?\n          <EthBalance />\n          : <WethBalance />}\n      </CardContent>\n      <CardActions>\n        <Wrapper wrap={wrap} />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { theme, Loader, Title } from '@gnosis.pm/safe-react-components';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nimport GlobalStyle from './GlobalStyle';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <SafeProvider\n        loader={\n          <>\n            <Title size=\"md\">Waiting for Safe...</Title>\n            <Loader size=\"md\" />\n          </>\n        }\n      >\n        <App />\n      </SafeProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}