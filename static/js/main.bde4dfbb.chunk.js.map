{"version":3,"sources":["GlobalStyle.ts","components/EthBalance.tsx","utils/Erc20Constants.ts","components/WethBalance.tsx","components/Wrapper.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","EthBalance","useState","balance","setBalance","useSafeAppsSDK","sdk","safe","a","eth","getBalance","safeAddress","balanceEth","ethers","utils","formatEther","useEffect","fetchBalance","console","log","size","WETH_ADDRESS","Erc20","WethBalance","provider","useMemo","SafeAppsSdkProvider","weth","Contract","balanceOf","balanceWeth","Wrapper","amountToWrap","setAmountToWrap","errorMessage","setErrorMessage","availableEth","setAvailableEth","isError","setIsError","wrapEth","useCallback","parsedAmount","parseEther","txs","send","to","value","toString","data","error","Number","parseFloat","fetchAvailableEth","validateAmout","newValue","isNaN","TextField","label","helperText","onChange","e","target","InputProps","endAdornment","variant","color","onClick","App","styled","form","Grid","container","spacing","direction","alignContent","item","ReactDOM","render","StrictMode","theme","loader","document","getElementById"],"mappings":"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","file":"static/js/main.bde4dfbb.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2';\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2';\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%\n    }\n\n    body {\n       height: 100%;\n       margin: 0px;\n       padding: 0px;\n    }\n\n    #root {\n        height: 100%;\n        padding-right: 0.5rem;\n    }\n\n    .MuiFormControl-root,\n    .MuiInputBase-root {\n        width: 100% !important;\n    }\n\n    @font-face {\n        font-family: 'Averta';\n        src: local('Averta'), local('Averta Bold'),\n        url(${avertaFont}) format('woff2'),\n        url(${avertaBoldFont}) format('woff');\n    }\n`;\n\nexport default GlobalStyle;\n","import React, { useEffect, useState } from 'react';\nimport { Title } from '@gnosis.pm/safe-react-components';\nimport { ethers } from 'ethers';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\n\nconst EthBalance: React.FC = () => {\n    const [balance, setBalance] = useState(\"loading state\");\n    const { sdk, safe } = useSafeAppsSDK();\n\n    async function fetchBalance() {\n        const balanceEth = await sdk.eth.getBalance([safe.safeAddress]);\n        setBalance(ethers.utils.formatEther(balanceEth));\n    }\n\n    useEffect(() => {\n        fetchBalance();\n        console.log(\"Updating ETH balance\");\n    }, []);\n\n    return <Title size=\"md\" >ETH balance: {balance}</Title>\n}\n\nexport default EthBalance;\n\n","export const WETH_ADDRESS = \"0xc778417E063141139Fce010982780140Aa0cD5Ab\";\nexport const Erc20 = [\n    \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n    \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n    \"function balanceOf(address _owner) public view returns (uint256 balance)\",\n    \"event Approval(address indexed _owner, address indexed _spender, uint256 _value)\"\n];\n","import React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport { Title } from '@gnosis.pm/safe-react-components';\nimport { SafeAppsSdkProvider } from '@gnosis.pm/safe-apps-ethers-provider';\nimport { ethers } from 'ethers';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { WETH_ADDRESS, Erc20 } from '../utils/Erc20Constants'\n\nconst WethBalance: React.FC = () => {\n    const [balance, setBalance] = useState(\"\");\n\n    const { sdk, safe } = useSafeAppsSDK();\n    const provider = useMemo(() => new SafeAppsSdkProvider(safe, sdk), [safe, sdk]);\n    const weth = useMemo(() => new ethers.Contract(WETH_ADDRESS, Erc20, provider), [provider]);\n\n    async function fetchBalance() {\n        const balanceWeth = await weth.balanceOf(safe.safeAddress);\n        setBalance(ethers.utils.formatEther(balanceWeth));\n    }\n\n    useEffect(() => {\n        fetchBalance();\n        console.log(\"Updating WETH balance\");\n    }, []);\n\n    return <Title size=\"md\" >WETH Balance: {balance}</Title>\n}\n\nexport default WethBalance;\n\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { TextField } from '@material-ui/core';\nimport { Button, } from '@gnosis.pm/safe-react-components';\nimport { WETH_ADDRESS } from '../utils/Erc20Constants';\nimport { ethers } from 'ethers';\n\nconst Wrapper: React.FC = () => {\n    const { sdk, safe } = useSafeAppsSDK();\n    const [amountToWrap, setAmountToWrap] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [availableEth, setAvailableEth] = useState(0.0);\n    const [isError, setIsError] = useState(false);\n\n    const wrapEth = useCallback(async () => {\n        if (isError) {\n            return;\n        }\n        try {\n            const parsedAmount = ethers.utils.parseEther(amountToWrap)\n            await sdk.txs.send({\n                txs: [{\n                    to: WETH_ADDRESS,\n                    value: parsedAmount.toString(),\n                    data: '0x'\n                }]\n            })\n        } catch (e) {\n            console.error(e)\n        }\n    }, [sdk, amountToWrap, isError])\n\n    useEffect(() => {\n        fetchAvailableEth();\n    }, [safe, sdk]);\n\n    async function fetchAvailableEth() {\n        const balanceEth = await sdk.eth.getBalance([safe.safeAddress]);\n        const a = ethers.utils.formatEther(balanceEth);\n        setAvailableEth(Number.parseFloat(a));\n    };\n\n    const validateAmout = useCallback((newValue: string) => {\n        console.log(newValue);\n        if (isNaN(Number(newValue))) {\n            setIsError(true);\n            setErrorMessage(\"Not a number\");\n        }\n        else if (Number.parseFloat(newValue) > availableEth) {\n            setIsError(true);\n            setErrorMessage(\"Not enough Ether\");\n        }\n        else {\n            setIsError(false);\n            setErrorMessage(\"\");\n            setAmountToWrap(newValue);\n        }\n    }, [availableEth])\n\n    return (\n        <TextField\n            value={amountToWrap}\n            label=\"How much ETH you want wrap?\"\n            error={isError}\n            helperText={errorMessage}\n            onChange={e => validateAmout(e.target.value)}\n            InputProps={{\n                endAdornment: <Button\n                    size=\"md\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => wrapEth()}>\n                    Wrap\n            </Button>\n            }}\n        />);\n}\n\nexport default Wrapper;\n","import styled from 'styled-components';\nimport EthBalance from './components/EthBalance';\nimport WethBalance from './components/WethBalance';\nimport Wrapper from './components/Wrapper';\nimport { Grid } from '@material-ui/core';\n\nconst Container = styled.form`\n  margin-bottom: 2rem;\n  width: 100%;\n  max-width: 480px;\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n`;\n\nconst App: React.FC = () => {\n\n  return (\n    <Grid\n      container\n      spacing={5}>\n      <Grid container direction=\"column\" alignContent=\"center\">\n        <EthBalance />\n        <WethBalance />\n      </Grid>\n      <Grid container item>\n        <Wrapper />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { theme, Loader, Title } from '@gnosis.pm/safe-react-components';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nimport GlobalStyle from './GlobalStyle';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <SafeProvider\n        loader={\n          <>\n            <Title size=\"md\">Waiting for Safe...</Title>\n            <Loader size=\"md\" />\n          </>\n        }\n      >\n        <App />\n      </SafeProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}